import schedule
import time
import logging
from datetime import datetime
from sqlalchemy.orm import Session
from prometheus_client import start_http_server, Counter, Histogram, Gauge
import yfinance as yf
import pandas as pd
import numpy as np
from database import SessionLocal, Acao, Carteira
from analyzer import analyze_stock
from notifier import send_email_notification

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/trading_bot.log'),
        logging.StreamHandler()
    ]
)

# M√©tricas Prometheus
RECOMMENDATIONS_COUNTER = Counter('trading_recommendations_total', 'Total de recomenda√ß√µes', ['action', 'stock'])
ANALYSIS_DURATION = Histogram('analysis_duration_seconds', 'Dura√ß√£o da an√°lise em segundos')
RSI_GAUGE = Gauge('stock_rsi', 'RSI da a√ß√£o', ['stock'])
MACD_GAUGE = Gauge('stock_macd', 'MACD da a√ß√£o', ['stock'])
PRICE_GAUGE = Gauge('stock_price', 'Pre√ßo atual da a√ß√£o', ['stock'])
TREND_GAUGE = Gauge('stock_trend', 'Tend√™ncia da a√ß√£o (1=UP, 0=DOWN)', ['stock'])
EMAIL_NOTIFICATIONS = Counter('email_notifications_total', 'Total de notifica√ß√µes por email enviadas')
ANALYSIS_ERRORS = Counter('analysis_errors_total', 'Total de erros na an√°lise', ['stock'])

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def analyze_all_stocks():
    """Analisa todas as a√ß√µes cadastradas e envia notifica√ß√µes"""
    logging.info("üîÑ Iniciando an√°lise de todas as a√ß√µes...")
    
    db = SessionLocal()
    try:
        # Busca todas as a√ß√µes ativas
        stocks = db.query(Acao).filter(Acao.ativo == True).all()
        logging.info(f"üìä Analisando {len(stocks)} a√ß√µes...")
        
        for stock in stocks:
            try:
                start_time = time.time()
                
                # Realiza a an√°lise
                analysis = analyze_stock(stock.codigo)
                
                # Registra m√©tricas
                duration = time.time() - start_time
                ANALYSIS_DURATION.observe(duration)
                
                RSI_GAUGE.labels(stock=stock.codigo).set(analysis['rsi'])
                MACD_GAUGE.labels(stock=stock.codigo).set(analysis['macd'])
                PRICE_GAUGE.labels(stock=stock.codigo).set(analysis['price'])
                TREND_GAUGE.labels(stock=stock.codigo).set(1 if analysis['trend'] == 'UP' else 0)
                
                # Verifica se h√° posi√ß√£o na carteira
                portfolio_position = db.query(Carteira).filter(Carteira.codigo == stock.codigo).first()
                
                # L√≥gica de notifica√ß√£o
                if portfolio_position:
                    # Tem a a√ß√£o na carteira
                    if analysis['current_position'] == 'SELL':
                        RECOMMENDATIONS_COUNTER.labels(action='SELL', stock=stock.codigo).inc()
                        send_sell_notification(stock.codigo, analysis, portfolio_position)
                else:
                    # N√£o tem a a√ß√£o na carteira
                    if analysis['new_position'] == 'BUY':
                        RECOMMENDATIONS_COUNTER.labels(action='BUY', stock=stock.codigo).inc()
                        send_buy_notification(stock.codigo, analysis)
                
                logging.info(f"‚úÖ {stock.codigo}: {analysis['current_position']}/{analysis['new_position']} - RSI: {analysis['rsi']:.2f}, MACD: {analysis['macd']:.2f}")
                
            except Exception as e:
                ANALYSIS_ERRORS.labels(stock=stock.codigo).inc()
                logging.error(f"‚ùå Erro ao analisar {stock.codigo}: {str(e)}")
        
        logging.info("üéØ An√°lise conclu√≠da!")
        
    except Exception as e:
        logging.error(f"‚ùå Erro geral na an√°lise: {str(e)}")
    finally:
        db.close()

def send_buy_notification(stock_code: str, analysis: dict):
    """Envia notifica√ß√£o de compra"""
    subject = f"üöÄ SINAL DE COMPRA: {stock_code}"
    body = f"""
    <h2>üìà Sinal de Compra Detectado!</h2>
    
    <h3>üéØ A√ß√£o: {stock_code}</h3>
    
    <h4>üí∞ Informa√ß√µes de Pre√ßo:</h4>
    <ul>
        <li><strong>Pre√ßo Atual:</strong> R$ {analysis['price']:.2f}</li>
        <li><strong>Varia√ß√£o:</strong> {analysis['profit_pct']:.2f}%</li>
        <li><strong>Stop Loss Sugerido:</strong> R$ {analysis['stop_loss']:.2f}</li>
        <li><strong>Take Profit Sugerido:</strong> R$ {analysis['take_profit']:.2f}</li>
    </ul>
    
    <h4>üìä Indicadores T√©cnicos:</h4>
    <ul>
        <li><strong>RSI:</strong> {analysis['rsi']:.2f}</li>
        <li><strong>MACD:</strong> {analysis['macd']:.2f}</li>
        <li><strong>Tend√™ncia:</strong> {analysis['trend']}</li>
    </ul>
    
    <h4>üîç Condi√ß√µes Identificadas:</h4>
    <ul>
        {''.join([f'<li>{condition}</li>' for condition in analysis['conditions']])}
    </ul>
    
    <p><em>‚ö†Ô∏è Esta √© uma an√°lise automatizada. Sempre fa√ßa sua pr√≥pria an√°lise antes de investir.</em></p>
    """
    
    try:
        send_email_notification(subject, body)
        EMAIL_NOTIFICATIONS.inc()
        logging.info(f"üìß Notifica√ß√£o de compra enviada para {stock_code}")
    except Exception as e:
        logging.error(f"‚ùå Erro ao enviar notifica√ß√£o de compra para {stock_code}: {str(e)}")

def send_sell_notification(stock_code: str, analysis: dict, position: Carteira):
    """Envia notifica√ß√£o de venda"""
    # Calcula lucro/preju√≠zo
    current_value = position.quantidade * analysis['price']
    invested_value = position.quantidade * position.preco_medio
    profit_loss = current_value - invested_value
    profit_loss_pct = (profit_loss / invested_value) * 100
    
    subject = f"üìâ SINAL DE VENDA: {stock_code}"
    body = f"""
    <h2>üìâ Sinal de Venda Detectado!</h2>
    
    <h3>üéØ A√ß√£o: {stock_code}</h3>
    
    <h4>üí∞ Sua Posi√ß√£o:</h4>
    <ul>
        <li><strong>Quantidade:</strong> {position.quantidade} a√ß√µes</li>
        <li><strong>Pre√ßo M√©dio:</strong> R$ {position.preco_medio:.2f}</li>
        <li><strong>Pre√ßo Atual:</strong> R$ {analysis['price']:.2f}</li>
        <li><strong>Valor Investido:</strong> R$ {invested_value:.2f}</li>
        <li><strong>Valor Atual:</strong> R$ {current_value:.2f}</li>
        <li><strong>Resultado:</strong> R$ {profit_loss:.2f} ({profit_loss_pct:+.2f}%)</li>
    </ul>
    
    <h4>üìä Indicadores T√©cnicos:</h4>
    <ul>
        <li><strong>RSI:</strong> {analysis['rsi']:.2f}</li>
        <li><strong>MACD:</strong> {analysis['macd']:.2f}</li>
        <li><strong>Tend√™ncia:</strong> {analysis['trend']}</li>
    </ul>
    
    <h4>üîç Condi√ß√µes Identificadas:</h4>
    <ul>
        {''.join([f'<li>{condition}</li>' for condition in analysis['conditions']])}
    </ul>
    
    <p><em>‚ö†Ô∏è Esta √© uma an√°lise automatizada. Sempre fa√ßa sua pr√≥pria an√°lise antes de investir.</em></p>
    """
    
    try:
        send_email_notification(subject, body)
        EMAIL_NOTIFICATIONS.inc()
        logging.info(f"üìß Notifica√ß√£o de venda enviada para {stock_code}")
    except Exception as e:
        logging.error(f"‚ùå Erro ao enviar notifica√ß√£o de venda para {stock_code}: {str(e)}")

def main():
    """Fun√ß√£o principal do bot"""
    logging.info("ü§ñ Iniciando Trading Bot...")
    
    # Inicia servidor de m√©tricas Prometheus
    start_http_server(8000)
    logging.info("üìä Servidor de m√©tricas iniciado na porta 8000")
    
    # Agenda an√°lise a cada hora
    schedule.every().hour.do(analyze_all_stocks)
    logging.info("‚è∞ An√°lise agendada para executar a cada hora")
    
    # Executa an√°lise inicial
    analyze_all_stocks()
    
    # Loop principal
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # Verifica a cada minuto
        except KeyboardInterrupt:
            logging.info("üõë Bot interrompido pelo usu√°rio")
            break
        except Exception as e:
            logging.error(f"‚ùå Erro no loop principal: {str(e)}")
            time.sleep(60)

if __name__ == "__main__":
    main()