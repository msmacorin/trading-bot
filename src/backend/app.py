import schedule
import time
import logging
from datetime import datetime, time as dt_time
from sqlalchemy.orm import Session
from prometheus_client import start_http_server, Counter, Histogram, Gauge
import pandas as pd
import numpy as np
from collections import defaultdict
from backend.analyzer import analyze_stock
from backend.notifier import send_email_notification
from backend.database import SessionLocal, Acao, Carteira, Usuario, get_acoes_ativas, get_carteira
import threading

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/trading_bot.log'),
        logging.StreamHandler()
    ]
)

# M√©tricas Prometheus
RECOMMENDATIONS_COUNTER = Counter('trading_recommendations_total', 'Total de recomenda√ß√µes', ['action', 'stock', 'user_id'])
ANALYSIS_DURATION = Histogram('analysis_duration_seconds', 'Dura√ß√£o da an√°lise em segundos')
RSI_GAUGE = Gauge('stock_rsi', 'RSI da a√ß√£o', ['stock', 'user_id'])
MACD_GAUGE = Gauge('stock_macd', 'MACD da a√ß√£o', ['stock', 'user_id'])
PRICE_GAUGE = Gauge('stock_price', 'Pre√ßo atual da a√ß√£o', ['stock', 'user_id'])
TREND_GAUGE = Gauge('stock_trend', 'Tend√™ncia da a√ß√£o (1=UP, 0=DOWN)', ['stock', 'user_id'])
EMAIL_NOTIFICATIONS = Counter('email_notifications_total', 'Total de notifica√ß√µes por email enviadas', ['user_id'])
ANALYSIS_ERRORS = Counter('analysis_errors_total', 'Total de erros na an√°lise', ['stock', 'user_id'])

# Cache compartilhado para an√°lises (para evitar an√°lises duplicadas)
analysis_cache = {}
cache_timestamp = None

# Lock global para cada a√ß√£o analisada on-demand
analysis_locks = {}
analysis_locks_global = threading.Lock()

def is_market_open():
    """
    Verifica se a bolsa brasileira est√° aberta
    Hor√°rio: 9h √†s 17h, segunda a sexta-feira (hor√°rio de Bras√≠lia)
    """
    now = datetime.now()
    
    # Verifica se √© dia √∫til (segunda a sexta = 0 a 4)
    if now.weekday() >= 5:  # 5 = s√°bado, 6 = domingo
        return False
    
    # Verifica se est√° no hor√°rio de funcionamento (9h √†s 17h)
    market_open = dt_time(9, 0)   # 9:00
    market_close = dt_time(17, 0)  # 17:00
    current_time = now.time()
    
    return market_open <= current_time <= market_close

def get_all_unique_stocks():
    """
    Coleta todas as a√ß√µes √∫nicas monitoradas por todos os usu√°rios ativos
    Retorna um dict com:
    - stock_code: set de user_ids que possuem essa a√ß√£o
    """
    db = SessionLocal()
    try:
        # Busca todos os usu√°rios ativos
        usuarios_ativos = db.query(Usuario).filter(Usuario.ativo == True).all()
        
        # Dicion√°rio para armazenar: codigo_acao -> {usuario_ids}
        stocks_users = defaultdict(set)
        
        # Para cada usu√°rio ativo, pega suas a√ß√µes
        for usuario in usuarios_ativos:
            stocks = db.query(Acao).filter(
                Acao.ativo == True, 
                Acao.usuario_id == usuario.id
            ).all()
            
            for stock in stocks:
                stocks_users[stock.codigo].add(usuario.id)
        
        logging.info(f"üìä Encontradas {len(stocks_users)} a√ß√µes √∫nicas monitoradas por {len(usuarios_ativos)} usu√°rios")
        
        # Log de estat√≠sticas
        for codigo, user_ids in stocks_users.items():
            logging.info(f"   {codigo}: monitorada por {len(user_ids)} usu√°rio(s)")
        
        return dict(stocks_users)
        
    except Exception as e:
        logging.error(f"‚ùå Erro ao coletar a√ß√µes √∫nicas: {str(e)}")
        return {}
    finally:
        db.close()

def analyze_unique_stocks():
    """
    Analisa cada a√ß√£o √∫nica apenas uma vez e armazena no cache compartilhado
    """
    global analysis_cache, cache_timestamp
    
    logging.info("üîÑ Iniciando an√°lise otimizada com cache compartilhado...")
    
    # Limpa o cache anterior
    analysis_cache.clear()
    cache_timestamp = datetime.now()
    
    # Coleta todas as a√ß√µes √∫nicas
    stocks_users = get_all_unique_stocks()
    
    if not stocks_users:
        logging.warning("‚ö†Ô∏è Nenhuma a√ß√£o encontrada para an√°lise")
        return
    
    total_stocks = len(stocks_users)
    total_users_affected = sum(len(users) for users in stocks_users.values())
    
    logging.info(f"üéØ Iniciando an√°lise de {total_stocks} a√ß√µes √∫nicas (afetando {total_users_affected} usu√°rios)")
    
    analysis_errors = []
    successful_analyses = 0
    
    # Analisa cada a√ß√£o √∫nica apenas uma vez
    for i, (codigo_acao, user_ids) in enumerate(stocks_users.items(), 1):
        try:
            logging.info(f"üìà [{i}/{total_stocks}] Analisando {codigo_acao} (usu√°rios: {len(user_ids)})...")
            
            start_time = time.time()
            
            # Realiza a an√°lise (√∫nica por a√ß√£o)
            analysis = analyze_stock(codigo_acao)
            
            # Registra tempo de an√°lise
            duration = time.time() - start_time
            ANALYSIS_DURATION.observe(duration)
            
            # Armazena no cache compartilhado
            analysis_cache[codigo_acao] = {
                'analysis': analysis,
                'user_ids': user_ids,
                'analyzed_at': datetime.now()
            }
            
            successful_analyses += 1
            
            logging.info(f"‚úÖ {codigo_acao}: {analysis['current_position']}/{analysis['new_position']} - RSI: {analysis['rsi']:.2f}, MACD: {analysis['macd']:.2f} (dura√ß√£o: {duration:.2f}s)")
            
        except Exception as e:
            error_msg = f"‚ùå Erro ao analisar {codigo_acao}: {str(e)}"
            analysis_errors.append(error_msg)
            logging.error(error_msg)
            
            # Registra erro para todos os usu√°rios desta a√ß√£o
            for user_id in user_ids:
                ANALYSIS_ERRORS.labels(stock=codigo_acao, user_id=user_id).inc()
    
    # Estat√≠sticas finais
    total_time = (datetime.now() - cache_timestamp).total_seconds()
    logging.info(f"üéØ An√°lise conclu√≠da: {successful_analyses}/{total_stocks} a√ß√µes analisadas em {total_time:.2f}s")
    
    if analysis_errors:
        logging.warning(f"‚ö†Ô∏è {len(analysis_errors)} erros durante a an√°lise")
    
    return successful_analyses, len(analysis_errors)

def process_user_notifications():
    """
    Processa notifica√ß√µes para cada usu√°rio baseado no cache compartilhado
    """
    if not analysis_cache:
        logging.warning("‚ö†Ô∏è Cache de an√°lises vazio, pulando notifica√ß√µes")
        return
    
    db = SessionLocal()
    try:
        # Busca todos os usu√°rios ativos
        usuarios_ativos = db.query(Usuario).filter(Usuario.ativo == True).all()
        
        logging.info(f"üìß Processando notifica√ß√µes para {len(usuarios_ativos)} usu√°rios...")
        
        for usuario in usuarios_ativos:
            try:
                process_single_user_notifications(usuario, db)
            except Exception as e:
                logging.error(f"‚ùå Erro ao processar notifica√ß√µes do usu√°rio {usuario.nome}: {str(e)}")
    
    except Exception as e:
        logging.error(f"‚ùå Erro geral ao processar notifica√ß√µes: {str(e)}")
    finally:
        db.close()

def process_single_user_notifications(usuario, db):
    """
    Processa notifica√ß√µes para um √∫nico usu√°rio baseado no cache
    """
    # Listas para armazenar resultados do usu√°rio
    buy_signals = []
    sell_signals = []
    all_analyses = []
    
    # Para cada a√ß√£o no cache, verifica se o usu√°rio a possui
    for codigo_acao, cache_data in analysis_cache.items():
        if usuario.id not in cache_data['user_ids']:
            continue  # Usu√°rio n√£o possui esta a√ß√£o
        
        analysis = cache_data['analysis']
        
        # Registra m√©tricas espec√≠ficas do usu√°rio
        RSI_GAUGE.labels(stock=codigo_acao, user_id=usuario.id).set(analysis['rsi'])
        MACD_GAUGE.labels(stock=codigo_acao, user_id=usuario.id).set(analysis['macd'])
        PRICE_GAUGE.labels(stock=codigo_acao, user_id=usuario.id).set(analysis['price'])
        TREND_GAUGE.labels(stock=codigo_acao, user_id=usuario.id).set(1 if analysis['trend'] == 'UP' else 0)
        
        # Adiciona √† lista de an√°lises do usu√°rio
        all_analyses.append({
            'stock': codigo_acao,
            'analysis': analysis
        })
        
        # Verifica se h√° posi√ß√£o na carteira do usu√°rio
        portfolio_position = db.query(Carteira).filter(
            Carteira.codigo == codigo_acao, 
            Carteira.usuario_id == usuario.id
        ).first()
        
        # L√≥gica de notifica√ß√£o
        if portfolio_position:
            # Tem a a√ß√£o na carteira - verifica sinais de venda
            if analysis['current_position'] == 'SELL':
                RECOMMENDATIONS_COUNTER.labels(action='SELL', stock=codigo_acao, user_id=usuario.id).inc()
                sell_signals.append({
                    'stock': codigo_acao,
                    'analysis': analysis,
                    'position': portfolio_position
                })
        else:
            # N√£o tem a a√ß√£o na carteira - verifica sinais de compra
            if analysis['new_position'] == 'BUY':
                RECOMMENDATIONS_COUNTER.labels(action='BUY', stock=codigo_acao, user_id=usuario.id).inc()
                buy_signals.append({
                    'stock': codigo_acao,
                    'analysis': analysis
                })
    
    # Envia email com resumo das an√°lises do usu√°rio (se houver conte√∫do)
    if buy_signals or sell_signals or all_analyses:
        send_user_analysis_summary_email(usuario, buy_signals, sell_signals, all_analyses, [])
        logging.info(f"üìß Email enviado para {usuario.nome} ({len(buy_signals)} compras, {len(sell_signals)} vendas, {len(all_analyses)} an√°lises)")
    else:
        logging.info(f"üìß Nenhuma notifica√ß√£o para {usuario.nome}")

def analyze_all_stocks():
    """
    Fun√ß√£o principal otimizada: analisa cada a√ß√£o apenas uma vez e distribui para todos os usu√°rios
    """
    logging.info("üöÄ Iniciando ciclo de an√°lise otimizado...")
    
    # Etapa 1: Analisa cada a√ß√£o √∫nica uma vez e armazena no cache
    successful_analyses, errors = analyze_unique_stocks()
    
    # Etapa 2: Processa notifica√ß√µes para cada usu√°rio baseado no cache
    if successful_analyses > 0:
        process_user_notifications()
    else:
        logging.warning("‚ö†Ô∏è Nenhuma an√°lise bem-sucedida, pulando notifica√ß√µes")
    
    # Estat√≠sticas finais
    total_time = (datetime.now() - cache_timestamp).total_seconds() if cache_timestamp else 0
    cache_size = len(analysis_cache)
    
    logging.info(f"üéØ Ciclo conclu√≠do: {cache_size} a√ß√µes no cache, {successful_analyses} sucessos, {errors} erros em {total_time:.2f}s")

# Fun√ß√£o legacy mantida para compatibilidade (agora usa o cache)
def analyze_user_stocks(usuario_id):
    """
    FUN√á√ÉO LEGACY: Analisa a√ß√µes de um usu√°rio (agora usa cache compartilhado)
    Mantida para compatibilidade com chamadas diretas
    """
    logging.info(f"üîÑ An√°lise individual do usu√°rio {usuario_id} (usando cache compartilhado)...")
    
    # Se n√£o h√° cache, faz an√°lise completa
    if not analysis_cache:
        logging.info("Cache vazio, executando an√°lise completa...")
        analyze_all_stocks()
        return
    
    # Usa o cache existente
    db = SessionLocal()
    try:
        usuario = db.query(Usuario).filter(Usuario.id == usuario_id, Usuario.ativo == True).first()
        if not usuario:
            logging.warning(f"‚ö†Ô∏è Usu√°rio {usuario_id} n√£o encontrado ou inativo")
            return
        
        process_single_user_notifications(usuario, db)
        logging.info(f"üéØ An√°lise do usu√°rio {usuario.nome} conclu√≠da usando cache!")
        
    except Exception as e:
        logging.error(f"‚ùå Erro na an√°lise do usu√°rio {usuario_id}: {str(e)}")
    finally:
        db.close()

def analyze_stock_on_demand(codigo_acao: str):
    """
    Analisa uma a√ß√£o on-demand, com lock para evitar execu√ß√µes simult√¢neas e salva no cache compartilhado.
    """
    global analysis_cache, cache_timestamp, analysis_locks, analysis_locks_global
    
    # Lock por a√ß√£o
    with analysis_locks_global:
        if codigo_acao not in analysis_locks:
            analysis_locks[codigo_acao] = threading.Lock()
        lock = analysis_locks[codigo_acao]
    
    with lock:
        # Se j√° est√° no cache, retorna direto
        if codigo_acao in analysis_cache:
            return analysis_cache[codigo_acao]['analysis']
        
        # Faz an√°lise e salva no cache
        from backend.analyzer import analyze_stock
        analysis = analyze_stock(codigo_acao)
        analysis_cache[codigo_acao] = {
            'analysis': analysis,
            'user_ids': set(),  # on-demand pode n√£o saber os usu√°rios, mas pode ser atualizado depois
            'analyzed_at': datetime.now()
        }
        cache_timestamp = datetime.now()
        return analysis

def send_user_analysis_summary_email(usuario, buy_signals, sell_signals, all_analyses, errors):
    """Envia email com resumo das an√°lises de um usu√°rio espec√≠fico"""
    from datetime import datetime
    
    # Verifica se a bolsa est√° aberta antes de enviar o email
    if not is_market_open():
        logging.info(f"üìß Email para {usuario.nome} n√£o enviado - bolsa fechada (hor√°rio: {datetime.now().strftime('%H:%M')})")
        return
    
    current_time = datetime.now().strftime("%d/%m/%Y %H:%M")
    
    subject = f"üìä Relat√≥rio de An√°lise - {usuario.nome} - {current_time}"
    
    # Cabe√ßalho personalizado
    body = f"""
    <h1>üìä Relat√≥rio de An√°lise de A√ß√µes</h1>
    <p><strong>Usu√°rio:</strong> {usuario.nome}</p>
    <p><strong>Email:</strong> {usuario.email}</p>
    <p><strong>Data/Hora:</strong> {current_time}</p>
    <p><strong>Total de a√ß√µes analisadas:</strong> {len(all_analyses)}</p>
    <p><strong>üéØ Sistema Otimizado:</strong> An√°lise √∫nica por a√ß√£o (compartilhada entre usu√°rios)</p>
    <hr>
    """
    
    # Se√ß√£o de sinais de compra
    if buy_signals:
        body += f"""
        <h2>üü¢ Sinais de Compra ({len(buy_signals)} a√ß√µes)</h2>
        <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr style="background-color: #e8f5e8;">
            <th>A√ß√£o</th>
            <th>Pre√ßo</th>
            <th>RSI</th>
            <th>MACD</th>
            <th>Tend√™ncia</th>
            <th>Recomenda√ß√£o</th>
        </tr>
        """
        
        for signal in buy_signals:
            analysis = signal['analysis']
            body += f"""
            <tr>
                <td><strong>{signal['stock']}</strong></td>
                <td>R$ {analysis['price']:.2f}</td>
                <td>{analysis['rsi']:.1f}</td>
                <td>{analysis['macd']:.3f}</td>
                <td>{analysis['trend']}</td>
                <td style="color: green;"><strong>{analysis['new_position']}</strong></td>
            </tr>
            """
        
        body += "</table><br>"
    
    # Se√ß√£o de sinais de venda
    if sell_signals:
        body += f"""
        <h2>üî¥ Sinais de Venda ({len(sell_signals)} posi√ß√µes)</h2>
        <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr style="background-color: #ffe8e8;">
            <th>A√ß√£o</th>
            <th>Quantidade</th>
            <th>Pre√ßo M√©dio</th>
            <th>Pre√ßo Atual</th>
            <th>Lucro/Preju√≠zo</th>
            <th>RSI</th>
            <th>Recomenda√ß√£o</th>
        </tr>
        """
        
        for signal in sell_signals:
            analysis = signal['analysis']
            position = signal['position']
            current_value = position.quantidade * analysis['price']
            invested_value = position.quantidade * position.preco_medio
            profit_loss = current_value - invested_value
            profit_pct = (profit_loss / invested_value) * 100 if invested_value > 0 else 0
            
            profit_color = "green" if profit_loss >= 0 else "red"
            
            body += f"""
            <tr>
                <td><strong>{signal['stock']}</strong></td>
                <td>{position.quantidade}</td>
                <td>R$ {position.preco_medio:.2f}</td>
                <td>R$ {analysis['price']:.2f}</td>
                <td style="color: {profit_color};">R$ {profit_loss:.2f} ({profit_pct:+.1f}%)</td>
                <td>{analysis['rsi']:.1f}</td>
                <td style="color: red;"><strong>{analysis['current_position']}</strong></td>
            </tr>
            """
        
        body += "</table><br>"
    
    # Se√ß√£o com todas as an√°lises (resumo)
    if all_analyses:
        body += f"""
        <h2>üìà Resumo Geral ({len(all_analyses)} a√ß√µes)</h2>
        <table border="1" style="border-collapse: collapse; width: 100%;">
        <tr style="background-color: #f0f0f0;">
            <th>A√ß√£o</th>
            <th>Pre√ßo</th>
            <th>RSI</th>
            <th>MACD</th>
            <th>Tend√™ncia</th>
            <th>Recomenda√ß√£o Atual</th>
            <th>Nova Posi√ß√£o</th>
        </tr>
        """
        
        for item in all_analyses:
            analysis = item['analysis']
            
            # Cores baseadas nas recomenda√ß√µes
            current_color = "red" if analysis['current_position'] == 'SELL' else "blue"
            new_color = "green" if analysis['new_position'] == 'BUY' else "gray"
            
            body += f"""
            <tr>
                <td><strong>{item['stock']}</strong></td>
                <td>R$ {analysis['price']:.2f}</td>
                <td>{analysis['rsi']:.1f}</td>
                <td>{analysis['macd']:.3f}</td>
                <td>{analysis['trend']}</td>
                <td style="color: {current_color};">{analysis['current_position']}</td>
                <td style="color: {new_color};">{analysis['new_position']}</td>
            </tr>
            """
        
        body += "</table><br>"
    
    # Se√ß√£o de estat√≠sticas do cache
    if cache_timestamp:
        cache_age = (datetime.now() - cache_timestamp).total_seconds()
        body += f"""
        <h3>üìä Informa√ß√µes do Sistema</h3>
        <ul>
            <li><strong>Cache gerado:</strong> {cache_timestamp.strftime('%H:%M:%S')}</li>
            <li><strong>Idade do cache:</strong> {cache_age:.0f} segundos</li>
            <li><strong>A√ß√µes no cache:</strong> {len(analysis_cache)}</li>
            <li><strong>An√°lises otimizadas:</strong> Uma an√°lise por a√ß√£o, compartilhada entre usu√°rios</li>
        </ul>
        """
    
    # Rodap√©
    body += """
    <hr>
    <p style="font-size: 12px; color: #666;">
    Este relat√≥rio foi gerado automaticamente pelo Trading Bot.<br>
    <strong>üöÄ Novo sistema otimizado:</strong> Cada a√ß√£o √© analisada apenas uma vez por ciclo, 
    independentemente de quantos usu√°rios a possuem, resultando em maior efici√™ncia e menor uso de recursos.
    </p>
    """
    
    # Registra m√©trica de email
    EMAIL_NOTIFICATIONS.labels(user_id=usuario.id).inc()
    
    # Envia o email
    send_email_notification(subject, body, usuario.email)
    logging.info(f"üìß Email enviado para {usuario.nome} ({usuario.email})")

def get_cache_stats():
    """Retorna estat√≠sticas do cache compartilhado"""
    if not analysis_cache:
        return {
            'cache_size': 0,
            'cache_timestamp': None,
            'cache_age_seconds': 0,
            'total_users_affected': 0
        }
    
    total_users = sum(len(data['user_ids']) for data in analysis_cache.values())
    cache_age = (datetime.now() - cache_timestamp).total_seconds() if cache_timestamp else 0
    
    return {
        'cache_size': len(analysis_cache),
        'cache_timestamp': cache_timestamp,
        'cache_age_seconds': cache_age,
        'total_users_affected': total_users,
        'stocks_analysis': {
            stock: {
                'users_count': len(data['user_ids']),
                'analyzed_at': data['analyzed_at'],
                'rsi': data['analysis']['rsi'],
                'recommendation': f"{data['analysis']['current_position']}/{data['analysis']['new_position']}"
            }
            for stock, data in analysis_cache.items()
        }
    }

def main():
    """Fun√ß√£o principal do bot"""
    logging.info("ü§ñ Iniciando Trading Bot com sistema de cache otimizado...")
    
    # Inicia servidor de m√©tricas Prometheus
    start_http_server(8000)
    logging.info("üìä Servidor de m√©tricas iniciado na porta 8000")
    
    # Agenda an√°lise a cada hora usando o novo sistema otimizado
    schedule.every().hour.do(analyze_all_stocks)
    logging.info("‚è∞ An√°lise otimizada agendada para executar a cada hora")
    
    # Log do status da bolsa na inicializa√ß√£o
    market_status = "aberta" if is_market_open() else "fechada"
    current_time = datetime.now().strftime("%H:%M")
    logging.info(f"üìà Status da bolsa: {market_status} (hor√°rio atual: {current_time})")
    
    # Executa an√°lise inicial otimizada
    logging.info("üöÄ Executando an√°lise inicial com sistema otimizado...")
    analyze_all_stocks()
    
    # Loop principal
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # Verifica a cada minuto
        except KeyboardInterrupt:
            logging.info("üõë Bot interrompido pelo usu√°rio")
            break
        except Exception as e:
            logging.error(f"‚ùå Erro no loop principal: {str(e)}")
            time.sleep(60)

if __name__ == "__main__":
    main()