"""
M√≥dulo de an√°lise t√©cnica de a√ß√µes
Usa m√∫ltiplos provedores de dados com fallback autom√°tico
"""

import pandas as pd
import numpy as np
from typing import Dict, List
import logging
from .data_providers import data_manager, create_fallback_data

# Configurar logging
logger = logging.getLogger(__name__)

def calculate_rsi(data: pd.Series, period: int = 14) -> float:
    """Calcula o RSI (Relative Strength Index)"""
    delta = data.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi.iloc[-1]

def calculate_macd(data: pd.Series, fast: int = 12, slow: int = 26, signal: int = 9) -> float:
    """Calcula o MACD (Moving Average Convergence Divergence)"""
    ema_fast = data.ewm(span=fast).mean()
    ema_slow = data.ewm(span=slow).mean()
    macd_line = ema_fast - ema_slow
    signal_line = macd_line.ewm(span=signal).mean()
    return macd_line.iloc[-1] - signal_line.iloc[-1]

def analyze_stock(stock_code: str) -> Dict:
    """
    Analisa uma a√ß√£o usando indicadores t√©cnicos com m√∫ltiplos provedores
    
    Args:
        stock_code: C√≥digo da a√ß√£o (ex: PETR4.SA ou PETR4 ou PETR4F)
    
    Returns:
        Dict com an√°lise completa incluindo recomenda√ß√µes
    """
    try:
        from src.backend.utils import normalize_stock_code, validate_stock_code, get_stock_display_info
        
        # Normaliza o c√≥digo da a√ß√£o
        try:
            normalized_code = normalize_stock_code(stock_code)
            stock_info = validate_stock_code(stock_code)
            display_info = get_stock_display_info(stock_code)
        except ValueError as e:
            logger.error(f"C√≥digo inv√°lido {stock_code}: {e}")
            raise ValueError(f"C√≥digo de a√ß√£o inv√°lido: {e}")
        
        logger.info(f"Iniciando an√°lise de {stock_info['display_name']} (c√≥digo normalizado: {normalized_code})")
        
        # Tenta obter dados hist√≥ricos usando m√∫ltiplos provedores
        # Para a√ß√µes fracion√°rias, tenta primeiro o c√≥digo fracion√°rio, depois o c√≥digo base
        if stock_info['is_fractional']:
            hist = data_manager.get_historical_data(normalized_code, days=30)
            if hist is None or hist.empty:
                # Se n√£o encontrar dados para a fracion√°ria, tenta a a√ß√£o normal
                base_code = stock_info['base_code']
                logger.info(f"Dados n√£o encontrados para {normalized_code}, tentando c√≥digo base {base_code}")
                hist = data_manager.get_historical_data(base_code, days=30)
        else:
            hist = data_manager.get_historical_data(normalized_code, days=30)
        
        # Se todos os provedores falharam, usa dados simulados
        if hist is None or hist.empty:
            logger.warning(f"Todos os provedores falharam para {normalized_code}, usando dados simulados")
            hist = create_fallback_data(normalized_code)
            using_simulated_data = True
        else:
            using_simulated_data = False
        
        # Verifica se temos dados suficientes
        if len(hist) < 5:
            raise ValueError(f"Dados insuficientes para an√°lise de {normalized_code}")
        
        # Pre√ßo atual (√∫ltimo pre√ßo de fechamento)
        current_price = hist['Close'].iloc[-1]
        
        # Calcula indicadores t√©cnicos
        rsi = calculate_rsi(hist['Close'])
        macd = calculate_macd(hist['Close'])
        
        # Tend√™ncia baseada em m√©dia m√≥vel
        if len(hist) >= 20:
            ma_period = 20
        elif len(hist) >= 10:
            ma_period = 10
        else:
            ma_period = min(5, len(hist))
        
        ma = hist['Close'].rolling(window=ma_period).mean().iloc[-1]
        trend = "UP" if current_price > ma else "DOWN"
        
        # Varia√ß√£o percentual no per√≠odo
        first_price = hist['Close'].iloc[0]
        profit_pct = ((current_price - first_price) / first_price) * 100
        
        # Stop loss e take profit
        stop_loss = current_price * 0.97  # -3%
        take_profit = current_price * 1.05  # +5%
        
        # An√°lise de condi√ß√µes de mercado
        conditions = []
        
        # Adiciona informa√ß√£o sobre fonte dos dados e tipo de a√ß√£o
        if stock_info['is_fractional']:
            conditions.append(f"üìä A√ß√£o fracion√°ria ({display_info['display_code']})")
        
        if using_simulated_data:
            conditions.append("‚ö†Ô∏è Usando dados simulados (APIs indispon√≠veis)")
        else:
            conditions.append("‚úÖ Dados obtidos de provedor externo")
            
        if not stock_info['is_known']:
            conditions.append("‚ö†Ô∏è C√≥digo n√£o reconhecido na base de dados")
        
        # An√°lise RSI
        if rsi < 30:
            conditions.append(f"üìâ RSI indica sobrevenda ({rsi:.1f})")
        elif rsi > 70:
            conditions.append(f"üìà RSI indica sobrecompra ({rsi:.1f})")
        else:
            conditions.append(f"üìä RSI neutro ({rsi:.1f})")
        
        # An√°lise MACD
        if macd > 0:
            conditions.append("üü¢ MACD positivo (momentum de alta)")
        else:
            conditions.append("üî¥ MACD negativo (momentum de baixa)")
        
        # An√°lise de tend√™ncia
        if trend == "UP":
            conditions.append(f"‚¨ÜÔ∏è Pre√ßo acima da m√©dia m√≥vel ({ma_period} per√≠odos)")
        else:
            conditions.append(f"‚¨áÔ∏è Pre√ßo abaixo da m√©dia m√≥vel ({ma_period} per√≠odos)")
        
        # L√≥gica de recomenda√ß√µes (VERS√ÉO CORRIGIDA E CLARA)
        current_position = "HOLD"
        new_position = "WAIT"
        
        # PRIMEIRO: Analisa sinais de VENDA para quem j√° tem a a√ß√£o
        if rsi > 85:
            current_position = "SELL"
            conditions.append("üö® Sinal de venda - sobrecompra extrema (RSI > 85)")
        elif rsi > 80 and macd < -0.1:
            current_position = "SELL"
            conditions.append("üö® Sinal de venda - sobrecompra com momentum negativo")
        elif macd < -0.25 and trend == "DOWN":
            current_position = "SELL"
            conditions.append("üö® Sinal de venda - momentum muito negativo")
        elif rsi < 45 and macd > 0:
            current_position = "HOLD"
            conditions.append("üíé Manter posi√ß√£o - poss√≠vel revers√£o")
        
        # SEGUNDO: Analisa sinais de COMPRA para quem n√£o tem a a√ß√£o
        # Resetar new_position para garantir l√≥gica limpa
        new_position = "WAIT"
        
        # BUY - Sinais FORTES de compra
        buy_signal = False
        if rsi < 35:
            buy_signal = True
            conditions.append("üéØ BUY: RSI muito baixo (< 35)")
        elif rsi < 45 and macd > 0 and trend == "UP":
            buy_signal = True  
            conditions.append("üéØ BUY: RSI baixo + MACD positivo + tend√™ncia alta")
        elif rsi < 50 and macd > 0.05 and trend == "UP":
            buy_signal = True
            conditions.append("üéØ BUY: Condi√ß√µes favor√°veis m√∫ltiplas")
        elif macd > 0.1 and trend == "UP":
            buy_signal = True
            conditions.append("üéØ BUY: MACD muito positivo + tend√™ncia alta")
        
        if buy_signal:
            new_position = "BUY"
        
        # WATCH - Sinais BONS de compra (s√≥ se n√£o for BUY)
        elif trend == "UP" and macd > 0.02:
            new_position = "WATCH"
            conditions.append("üëÄ WATCH: Tend√™ncia positiva + MACD bom")
        elif rsi < 60 and trend == "UP" and macd > -0.05:
            new_position = "WATCH"
            conditions.append("üëÄ WATCH: RSI moderado + tend√™ncia positiva")
        elif rsi < 55 and trend == "UP":
            new_position = "WATCH"
            conditions.append("üëÄ WATCH: RSI bom + tend√™ncia positiva")
        elif rsi < 70 and macd > 0.08:
            new_position = "WATCH"
            conditions.append("üëÄ WATCH: MACD forte")
        
        # CONSIDER - Sinais RAZO√ÅVEIS (s√≥ se n√£o for BUY nem WATCH)
        elif rsi < 70 and trend == "UP":
            new_position = "CONSIDER"
            conditions.append("ü§î CONSIDER: Tend√™ncia positiva")
        elif rsi < 65 and macd > -0.02:
            new_position = "CONSIDER"
            conditions.append("ü§î CONSIDER: RSI moderado + MACD neutro")
        elif rsi < 75 and macd > 0.03:
            new_position = "CONSIDER"
            conditions.append("ü§î CONSIDER: Sinais mistos positivos")
        
        # Adiciona informa√ß√µes sobre volume se dispon√≠vel
        if 'Volume' in hist.columns:
            avg_volume = hist['Volume'].tail(5).mean()
            last_volume = hist['Volume'].iloc[-1]
            if last_volume > avg_volume * 1.5:
                conditions.append("üìä Volume acima da m√©dia (atividade alta)")
            elif last_volume < avg_volume * 0.5:
                conditions.append("üìä Volume abaixo da m√©dia (atividade baixa)")
        
        return {
            "codigo": normalized_code,
            "codigo_original": stock_code,
            "display_name": display_info['display_code'],
            "is_fractional": stock_info['is_fractional'],
            "current_position": current_position,
            "new_position": new_position,
            "price": round(float(current_price), 2),
            "stop_loss": round(float(stop_loss), 2),
            "take_profit": round(float(take_profit), 2),
            "profit_pct": round(float(profit_pct), 2),
            "rsi": round(float(rsi), 2),
            "macd": round(float(macd), 4),
            "trend": trend,
            "conditions": conditions,
            "data_source": "simulated" if using_simulated_data else "external",
            "analysis_timestamp": pd.Timestamp.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Erro cr√≠tico na an√°lise de {stock_code}: {str(e)}")
        
        # Fallback final com dados m√≠nimos
        try:
            normalized_code = normalize_stock_code(stock_code)
            display_name = stock_code
        except:
            normalized_code = stock_code
            display_name = stock_code
            
        return {
            "codigo": normalized_code,
            "codigo_original": stock_code,
            "display_name": display_name,
            "is_fractional": False,
            "current_position": "HOLD",
            "new_position": "WAIT",
            "price": 25.00,
            "stop_loss": 24.25,
            "take_profit": 26.25,
            "profit_pct": 0.0,
            "rsi": 50.0,
            "macd": 0.0,
            "trend": "NEUTRAL",
            "conditions": [
                "‚ùå Erro na an√°lise t√©cnica",
                f"üîß Detalhes: {str(e)}",
                "üìã Dados de fallback apresentados"
            ],
            "data_source": "fallback",
            "analysis_timestamp": pd.Timestamp.now().isoformat()
        }

def test_data_providers(symbols: List[str] = None) -> Dict:
    """
    Testa todos os provedores de dados dispon√≠veis
    
    Args:
        symbols: Lista de s√≠mbolos para teste
        
    Returns:
        Relat√≥rio de testes dos provedores
    """
    if symbols is None:
        symbols = ['PETR4', 'VALE3', 'ITUB4']
    
    logger.info("Testando provedores de dados...")
    results = data_manager.test_providers(symbols)
    
    # Adiciona resumo
    total_providers = len(results)
    working_providers = sum(1 for p in results.values() 
                           if any(t['success'] for t in p['tests'].values()))
    
    results['summary'] = {
        'total_providers': total_providers,
        'working_providers': working_providers,
        'availability_rate': working_providers / total_providers if total_providers > 0 else 0
    }
    
    return results

if __name__ == "__main__":
    # Testa o sistema com algumas a√ß√µes
    test_stocks = ["PETR4", "VALE3", "ITUB4"]
    
    print("=== Teste do Sistema de An√°lise ===\n")
    
    # Testa provedores
    print("1. Testando provedores de dados...")
    provider_results = test_data_providers()
    print(f"Provedores funcionais: {provider_results['summary']['working_providers']}/{provider_results['summary']['total_providers']}")
    print()
    
    # Testa an√°lises
    print("2. Testando an√°lises...")
    for stock in test_stocks:
        try:
            print(f"\n=== An√°lise de {stock} ===")
            result = analyze_stock(stock)
            
            print(f"Pre√ßo: R$ {result['price']}")
            print(f"Recomenda√ß√£o (posi√ß√£o atual): {result['current_position']}")
            print(f"Recomenda√ß√£o (nova posi√ß√£o): {result['new_position']}")
            print(f"RSI: {result['rsi']}")
            print(f"Fonte dos dados: {result['data_source']}")
            print(f"Condi√ß√µes: {result['conditions'][:3]}")  # Primeiras 3 condi√ß√µes
            
        except Exception as e:
            print(f"Erro ao analisar {stock}: {e}")